// ==========================================================================
// FRyDoM - frydom-ce.org
//
// Copyright (c) Ecole Centrale de Nantes (LHEEA lab.) and D-ICE Engineering.
// All rights reserved.
//
// Use of this source code is governed by a GPLv3 license that can be found
// in the LICENSE file of FRyDoM.
//
// ==========================================================================


#ifndef FRYDOM_FROBJECT_H
#define FRYDOM_FROBJECT_H

#include "boost/lexical_cast.hpp"
#include "boost/uuid/uuid_io.hpp"
#include "boost/uuid/uuid.hpp"
#include "boost/uuid/uuid_generators.hpp"

namespace frydom {

  /**
   * \class FrObject
   * \brief Class for defining objects in FRyDoM.
   */
  class FrObject {

   private:
    std::string m_UUID;         ///< Universal Unique Identifier, generated by boost

   public:

    /// Default constructor
    FrObject();

    /// Get the universal unique identifier
    /// \return universal unique identifier
    std::string GetUUID() const;

    /// Get a 5 digits shortcut of the universal unique identifier
    /// \return 5 digits shortcut of the universal unique identifier
    std::string GetShortenUUID() const;


   public:

    /// Base method for Initialization of FryDoM objects
    ///
    /// This must be overrided in children classes in case of a need for special initialization at the beginning
    /// of a computation. Every Initialize() methods must be called indirectly when the call to
    /// FrOffshoreSystem::Initialize() is done.
    virtual void Initialize() = 0;

    /// This function is called at the end of the time step, after the last step of the integration scheme.
    virtual void StepFinalize() {}; // FIXME : pourquoi pas virtuel pur ?

  };

}  // end namespace frydom

#endif //FRYDOM_FROBJECT_H
